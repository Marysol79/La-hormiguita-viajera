En git hub tenemos 3 posiciones para los archivos

1. working files :: archivos que estoy editando
2. staging:: es un stand by de los archivos que estan listo para agregar al repositorio
3. commit:: aca los archivos ya estan en el "log" o ya estan registrados



para configurar:

git config --global user.name "Matias Stancato"
git config --global user.mail "stancato.m@gmail.com"

git config --global init.default branch main

git config -h :: 		muestra la ayuda de todos los comandos para config

clear :: 			limpia la consola


Para crear un nuevo repositorio:

git init ::  			se usa siempre para inicializar y crear un nuevo repositorio

git status:: 			te va a dar el estado del repositorio, se usa muy a menudo

git add  :: 			para trackear, o "activar" el archivo o carpeta para que github lo siga, si se hacen modificaciones.

si uso git add .::		trackeo todos los archivos que estaban sin trackear.

si uso git add index.html , solo voy a trackear el archivo index.html 

git rm --cached index.html :: 	para dejar de trackear un archivo, en este caso index.html  


COMMIT
git commit -m "nombredelguardad":: 			esto sirve para hacer un commit, esto es como sacarle una foto en este instante al repositorio y que te quede un registro 
git commit -m "nombredelcomitarreglado" -- amend:: 	para arreglar el nombre del ultimo commit


Si se modifica un archivo, primero se tiene que hacer un add del archivo para luego poder hacer un commit


LOG
git log:: 			Muestra todos los commit que hice, con hora, fecha, rama, y nombre del commit
git log --oneline:		Muestra mis commits o cambios en una forma mas abreviada
git log -p:: 			Muestra los cambios realizados con mas profundidad, ya sea los cambios de codigo o los cambios en un html por ejemplo.. 
se debe apretar q para salir de esta vista


BRANCH
git branch nombrederama : 	  		crea una nueva rama
git branch:			  		Me muestra todas las ramas, la de color verde es la que estoy parado
git switch nombredelaramaquequieroir:: 		Me muevo a otra rama
git switch -c nombredelanuevarama :: 		Creo y me muevo a la nueva rama todo en un solo paso
git checkout nombredelaramaquequieroir::	me muevo a esa rama
git branch -D nombredelarama:	  		borra la rama, no puedo estar dentro de esa rama

MERGE
git marge -m "arreglodemihtmlparalaramamain" nombredelaramaquequieromergiar : aca junto mi rama que tiene el arreglo con mi rama que quiero que tenga el arreglo, debo estar parado en la
rama que quiero que agrege la rama



COMO USAR GITHUB:

1. crear un nuevo repositorio
2. git remote add origin https://github.com/MatiasStancato/lahormigavoladora.git para crear una conexion entre  el repositorio que o lo que estuve haciendo en mi pc y github
3. git branch -M main :: va a setear la branch main como la que quiero mandar el repo
4. git push -u origin main :: esto va a mandar todo el contenido de mi repositorio local a GITHUB

puedo hacer git push --all para que pushee todas mis ramas

git fech :: 	traigo todos los cambio desde GITHUB a mi repositorio local
git merge :: 	junto lo que traje de GITHUB con mi repositorio local

gitpull :: 	hace el git fetch y el git merge en un solo comando













